// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package mocks

import (
	model "gin_training/internal/model"

	mock "github.com/stretchr/testify/mock"
)

// DB is an autogenerated mock type for the DB type
type DB struct {
	mock.Mock
}

// Create provides a mock function with given fields: _a0
func (_m *DB) Create(_a0 model.Book) (model.Book, error) {
	ret := _m.Called(_a0)

	var r0 model.Book
	if rf, ok := ret.Get(0).(func(model.Book) model.Book); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(model.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(model.Book) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBook provides a mock function with given fields: id
func (_m *DB) DeleteBook(id string) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindAll provides a mock function with given fields:
func (_m *DB) FindAll() []model.Book {
	ret := _m.Called()

	var r0 []model.Book
	if rf, ok := ret.Get(0).(func() []model.Book); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Book)
		}
	}

	return r0
}

// GetBook provides a mock function with given fields: _a0
func (_m *DB) GetBook(_a0 string) (model.Book, error) {
	ret := _m.Called(_a0)

	var r0 model.Book
	if rf, ok := ret.Get(0).(func(string) model.Book); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(model.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBook provides a mock function with given fields: _a0, _a1
func (_m *DB) UpdateBook(_a0 string, _a1 model.UpdateBookInput) (model.Book, error) {
	ret := _m.Called(_a0, _a1)

	var r0 model.Book
	if rf, ok := ret.Get(0).(func(string, model.UpdateBookInput) model.Book); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(model.Book)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, model.UpdateBookInput) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
